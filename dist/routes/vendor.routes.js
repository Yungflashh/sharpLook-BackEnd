"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/routes/vendor.routes.ts
const express_1 = require("express");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const vendor_controller_1 = require("../controllers/vendor.controller");
const vendor_controller_2 = require("../controllers/vendor.controller");
const upload_middleware_1 = require("../middlewares/upload.middleware");
const vendorPricing_controller_1 = require("../controllers/vendorPricing.controller");
const vendorAnalytics_controller_1 = require("../controllers/vendorAnalytics.controller");
const admin_controller_1 = require("../controllers/admin.controller");
const router = (0, express_1.Router)();
router.get("/dashboard", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), (req, res) => {
    res.json({ message: "Welcome, Vendor!" });
});
router.put("/complete-profile", auth_middleware_1.verifyToken, upload_middleware_1.uploadMultiple, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_1.completeVendorProfile);
router.post("/upload", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), upload_middleware_1.uploadMultiple, vendor_controller_2.uploadPortfolioImages);
router.get("/fetchPortfolioImage", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_2.fetchPortfolioImages);
router.get("/getVendorPricing", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendorPricing_controller_1.fetchVendorPricing);
router.post("/setVendorPricing", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendorPricing_controller_1.setVendorPricing);
router.get("/getCategories", admin_controller_1.fetchServiceCategories);
router.get("/filter-by-service", vendor_controller_2.filterVendorsByService);
router.post("/setVendorAvailability", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_2.updateAvailability);
router.get("/getVendorAvailability", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_2.fetchAvailability);
router.put("/update-service-radius", auth_middleware_1.verifyToken, vendor_controller_2.updateServiceRadius);
router.get("/analytics/:vendorId", auth_middleware_1.verifyToken, vendorAnalytics_controller_1.fetchVendorAnalytics);
router.get("/earnings-graph", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendorAnalytics_controller_1.fetchVendorEarningsGraph);
router.post('/mark-vendor-paid', auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_1.markVendorAsPaidController);
router.get('/getMySub', auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_1.getVendorSubscriptionController);
router.put("/profile/edit", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), upload_middleware_1.uploadMultiple, vendor_controller_2.editVendorProfile);
router.delete("/deleteMyVendorAcct", auth_middleware_1.verifyToken, (0, auth_middleware_1.requireRole)(["VENDOR"]), vendor_controller_2.deleteVendorAccountController);
exports.default = router;
